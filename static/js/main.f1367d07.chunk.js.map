{"version":3,"sources":["usePersist.js","Store.js","Header.js","Footer.js","firebase.js","paginas/Clases/Clases.js","paginas/Clases/index.js","paginas/Clases/Clase0.js","paginas/Clases/Clase1.js","paginas/Clases/Clase2.js","paginas/Clases/Clase3.js","paginas/Clases/Clase4.js","paginas/Clases/Clase5.js","paginas/Clases/Clase6.js","paginas/Clases/Clase7.js","paginas/Clases/Clase8.js","paginas/Clases/Clase9.js","paginas/Clases/Clase10.js","paginas/Ejercicios.js","paginas/Indice.js","paginas/Portada.js","paginas/Estadisticas.js","paginas/Usuario.js","paginas/NotFound.js","paginas/DataFeededLesson.js","App.js","index.js"],"names":["localStorage","window","Store","React","createContext","reducer","state","action","type","Object","objectSpread","user","payload","Header","props","useContext","react_default","a","createElement","className","react_router_dom","to","id","activeClassName","email","Footer","href","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","auth","subject","Subject","Clases","_useState","useState","_useState2","slicedToArray","compiled","setCompiled","_useState3","_useState4","textValue","setTextValue","_useState5","_useState6","input","setInput","outputFunction","text","prevOutput","inputFunction","Promise","resolve","subscribe","value","builtinRead","x","Sk","builtinFiles","handleSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","_window","wrap","_context","prev","next","preventDefault","__webpack_require__","e","then","t","bind","configure","output","read","inputfun","misceval","asyncToPromise","importMainWithBody","mod","err","toString","stop","_x","apply","this","arguments","clase","title","name","onSubmit","style","marginTop","react_codemirror2","options","theme","lineNumbers","onBeforeChange","editor","data","onChange","onClick","nameRef","ref","child","uid","n","on","snapshot","val","includes","push","set","placeholder","target","listaClases","tags","brief","ejercicios","Ejercicios","paginas_Clases","datos","forEach","tag","Indice","setState","Fragment","toLowerCase","length","devolver","keys","llave","slice","required","htmlFor","map","i","key","Math","random","Portada","Estadisticas","setData","useEffect","signOut","Usuario","_useContext","dispatch","passwordField","setPasswordField","emailField","setEmailField","passwordConfField","setPasswordConfField","_useState7","text1","text2","_useState8","loginOrRegister","setLoginOrRegister","login","pass","signInWithEmailAndPassword","sent","_x2","signUp","_ref2","_callee2","passconf","_context2","createUserWithEmailAndPassword","console","warn","_x3","_x4","_x5","_ref3","_callee3","_context3","confirmPass","paginas_Estadisticas","NotFoundComponent","DataFeededLesson","match","params","NotFound","App","basename","src_Header","react_router","exact","path","component","src_Footer","ReactDOM","render","globalStore","context","undefined","persistedContext","getItem","JSON","parse","usePersistedContext","_usePersistedReducer","setItem","stringify","usePersistedReducer","useReducer","_usePersistedReducer2","Provider","children","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f1367d07.chunk.js","sourcesContent":["/* snippet from f/react-hooks-todo-app */\nimport { useEffect } from 'react'\n\nconst { localStorage } = window\n\nexport function usePersistedContext (context, key = 'state') {\n  const persistedContext = localStorage.getItem(key)\n  return persistedContext ? JSON.parse(persistedContext) : context\n}\n\nexport function usePersistedReducer ([state, dispatch], key = 'state') {\n  useEffect(() => localStorage.setItem(key, JSON.stringify(state)), [state])\n  return [state, dispatch]\n}\n","import React, { useReducer, useContext } from 'react'\nimport { usePersistedContext, usePersistedReducer } from './usePersist'\n\nconst initialState = {}\nexport const Store = React.createContext(initialState)\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'USER_LOGIN':\n      return { ...state, user: action.payload }\n    default:\n      return state\n  }\n}\n\nexport function StoreProvider (props) {\n  const globalStore = usePersistedContext(useContext(Store))\n  const [ state, dispatch ] = usePersistedReducer(useReducer(reducer, globalStore))\n  const value = { state, dispatch }\n  return <Store.Provider value={value}>{props.children}</Store.Provider>\n}\n","import React, { useContext } from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport { Store } from './Store'\n\nconst Header = (props) => {\n  const { state } = useContext(Store)\n  return (\n    <header>\n      <nav>\n        <div className='nav-wrapper blue-grey darken-4'>\n          <NavLink to='/' className='brand-logo'>#LoDamosVuelta</NavLink>\n          <ul id='nav-mobile' className='right hide-on-med-and-down'>\n            <li><NavLink activeClassName='active' to='/'>Inicio</NavLink></li>\n            <li><NavLink activeClassName='active' to='/indice'>Clases</NavLink></li>\n            <li><NavLink activeClassName='active' to='/lessons'>Ejercicios</NavLink></li>\n            <li><NavLink activeClassName='active' to='/user'>{state.user ? state.user.email : 'Usuario' }</NavLink></li>\n          </ul>\n        </div>\n      </nav>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nconst Footer = (props) => {\n  return (\n    <footer className='page-footer blue-grey darken-4'>\n      <div className='container'>\n        <div className='row'>\n          <div className='col l6 s12'>\n            <h5 className='white-text'>Quienes Somos</h5>\n            <p className='grey-text text-lighten-4'>-Christian Amo -Francisca Inostroza<br /> -Axel Kuljis  -Nicolas Manzano  <br /> -Gabriel Pérez     -Valeria Ruiz</p>\n          </div>\n          <div className='col l4 offset-l2 s12'>\n            <h5 className='white-text'>Sitios de Interés</h5>\n            <ul>\n              <li><a className='grey-text text-lighten-3' href='http://www.uai.cl'>Universidad Adolfo Ibáñez</a></li>\n              <li><a className='grey-text text-lighten-3' href='http://webcursos.uai.cl'>WebCursos</a></li>\n              <li><a className='grey-text text-lighten-3' href='https://cs50.harvard.edu/'>CS50 Harvard</a></li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import * as firebase from 'firebase'\n\nconst config = { // All data is still accesible from the browser but looks more professional\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n}\n\nfirebase.initializeApp(config)\nconst database = firebase.database()\nconst auth = firebase.auth()\n\nexport { database, auth }\nexport default firebase\n","import React, { useState, useContext } from 'react'\n// import createPersistedState from 'use-persisted-state'\nimport { database } from '../../firebase'\nimport { Store } from '../../Store'\nimport { Controlled as CodeMirror } from 'react-codemirror2'\nimport { Subject } from 'rxjs'\n\nimport 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/material.css'\nimport 'codemirror/mode/python/python'\nimport 'codemirror/mode/javascript/javascript'\nimport './clases.css'\n\nconst subject = new Subject()\n\nconst Clases = (props) => {\n  // const useTextState = createPersistedState(`state-clase-${props.clase.n}`)\n  const { state: { user } } = useContext(Store)\n  const [ compiled, setCompiled ] = useState('')\n  const [ textValue, setTextValue ] = useState('')\n  const [ input, setInput ] = useState('')\n\n  const hecho = () => {\n    let nameRef = database.ref().child('vistos').child(user.uid)\n    let n = props.clase.n\n    nameRef.on('value', snapshot => {\n      let data = snapshot.val()\n      if (data) {\n        if (!data.includes(n)) {\n          data.push(n)\n          nameRef.set(data)\n        }\n      } else {\n        nameRef.set([n])\n      }\n    })\n  }\n\n  const outputFunction = text => setCompiled(prevOutput => prevOutput + text)\n  const inputFunction = () => new Promise(resolve => subject.subscribe(value => resolve(value)))\n  const builtinRead = x => window.Sk.builtinFiles['files'][x]\n\n  const handleSubmit = async (event) => {\n    event.preventDefault()\n    setCompiled('')\n  \n    await import(\n      /* webpackChunkName: \"skulpt\", webpackPreload: true */\n      '../../lib/skulpt.min.js'\n    )\n    await import(\n      /* webpackChunkName: \"skulpt-stdlib\", webpackPrefetch: true */\n      '../../lib/skulpt-stdlib'\n    )\n    const { Sk } = window\n    Sk.configure({ \n      output: outputFunction,\n      read: builtinRead,\n      inputfun: inputFunction\n    })\n    \n    Sk.misceval.asyncToPromise(() => Sk.importMainWithBody('<stdin>', false, textValue, true))\n    .then(mod => {\n\n    }, err => {\n      setCompiled(err.toString())\n    })\n  }\n\n\n  const onSubmitInput = e => {\n    e.preventDefault()\n    subject.next(input)\n    setInput('')\n  } \n  const CodeMirrorConfig = {\n    theme: 'material',\n    lineNumbers: true\n  }\n  return (\n    <div className='row' >\n      <div className='col s4'>\n        <h5>{props.clase.title}</h5>\n        <div className='texto-clases'>\n          <pre >{props.clase.text}</pre>\n        </div>\n      </div>\n      <form name='editor-form' onSubmit={handleSubmit} className='col s4'>\n        <div className='row' style={{marginTop: '3px'}}>\n          <CodeMirror\n            value={textValue}\n            options={CodeMirrorConfig}\n            onBeforeChange={(editor, data, value) => {\n              setTextValue(value)\n            }}\n            onChange={(editor, data, value) => {\n            }}\n          />\n        </div>\n        <button className='waves-effect waves-light btn' type='submit' value='Submit' >COMPILAR</button>\n        {user && (<button className='waves-effect waves-light btn' onClick={hecho} >HECHO </button>)}\n      </form>\n      <div className='col s4 console' >\n        <h5>OUTPUT</h5>\n        <div id='console'>\n          {compiled}\n          <form onSubmit={onSubmitInput} className=\"col s12\">\n            <div className=\"row\">\n              <div className=\"input-field col s12\">\n                <input id=\"terminal-input\" placeholder='Escribe en consola aquí' type=\"text\" value={input} onChange={e => setInput(e.target.value)} className=\"validate\" /> \n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Clases\n","import Clases from './Clases'\nimport Clase0 from './Clase0'\nimport Clase1 from './Clase1'\nimport Clase2 from './Clase2'\nimport Clase3 from './Clase3'\nimport Clase4 from './Clase4'\nimport Clase5 from './Clase5'\nimport Clase6 from './Clase6'\nimport Clase7 from './Clase7'\nimport Clase8 from './Clase8'\nimport Clase9 from './Clase9'\nimport Clase10 from './Clase10'\nexport default Clases\nconst listaClases = [ Clase0, Clase1, Clase2, Clase3, Clase4, Clase5, Clase6, Clase7, Clase8, Clase9, Clase10 ]\nexport { listaClases, Clase0, Clase1, Clase2, Clase3, Clase4, Clase5, Clase6, Clase7, Clase8, Clase9, Clase10 }\n","const clase0 = {\n  title: 'Clase 0: Introducción',\n  n: 0,\n  tags: ['funciones', 'variables', 'básico', 'librerias', 'hello', 'world', 'main', 'tipo', 'datos'],\n  brief: `Este es el punto de partida. Aprenderás lo más básico de la programación.`,\n  text: `¿Qué es una función?\n  Una función es un bloque de código que realiza alguna operación.\n  Parámetros:\n  Una función debe definir parámetros de entrada que permiten a los llamadores pasar argumentos a la función.\n  Return:\n  Una función también puede devolver un valor como salida.\n  Librerías:\n  Es un conjunto o colección de subprogramas usados para desarrollar software\n  Se pueden entender como un conjunto de funciones reutilizables.\n  Por ejemplo si necesitas crear un programa relacionado con las matemáticas, no es necesario crear las funciones que multipliquen o dividan, ya que están en una librería (#include<math.h>)\n  Siempre se deben escribir como #include<nombre_libreria.h>\n  Ejemplos de algunas funciones que contienen las librerías más comunes:\n\n  Math.h :\n  Ceil\n  Floor\n  Pow\n  Ctype.h:\n  Toupper\n  Stdio.h:\n  Fclose\n  Feof\n  Fgets\n  Fopen\n  Printf\n  Stdlib.h:\n  Atof\n  Malloc\n  String.h :\n  Strlen\n\n  Main:\n  Es la función principal.\n  La función main es el punto de entrada de cualquier programa en c, es donde se inicia la ejecución del programa.\n  Cada programa en c tiene una función main ()\n  La función principal se trata igual que todas las funciones, es decir, tiene un tipo de retorno y parámetros de entrada(void). La única diferencia es que la función principal es “llamada” por el sistema cuando el usuario ejecuta el programa.\n  Por lo tanto, la función principal es siempre el primer código ejecutado cuando se inicia el programa\n  El main debe estar entre corchetes, y además siempre será int main(void),\n  Ejemplo:\n  #include<stdio.h>\n\n  int main (void) {\n  código a ejecutar.\n  }\n\n  Variables : ¿Qué son? ¿Para que sirven? ¿Qué tipos hay? (locales y globales)\n  Permiten almacenar información, se puede facilitar la comprensión de una variable si son entendidas como una caja que guarda algo.\n  Para definir una variable debemos asignarle un tipo:\n  Char ➔ para guardar un carácter\n  Int ➔  para guardar enteros\n  Long ➔ para guardar enteros largos\n  Float ➔ para guardar decimales simples\n  Double ➔ para guardar decimales dobles\n  String ➔ sirve para guardar un arreglo de caracteres, es decir un conjunto de char, por ejemplo string s=“hola”;\n  En la caja s quedara la palabra hola\n\n  Syntax ➔\n  Aquí declaramos una variable\n  Tipo_variable nombre = value;\n  Donde el tipo seria, char , int, etc.\n  Nombre es el que le queremos dar a la variable\n  Tener en cuenta que: el nombre de una variable no puede tener espacio, se recomienda utilizar guión bajo para reemplazar el espacio, además también se recomienda colocarle un nombre que podamos identificar, para facilitar su uso y la lectura del código posteriormente\n  Y con el = le asignamos el valor (value)\n  Ejemplo : int b = 3;\n  La variable b, es de tipo int, y tendrá el valor 3.\n  Se puede entender como una caja llamada “b”, la cual guarda solo números enteros(porque se definió como int) y en este caso particular se está asignando el valor  3, por lo tanto dentro de la caja “b”, se encuentra guardado el numero 3\n  Para utiliza una variable, debe ser primero declarada.\n  Las variables se pueden guardar global y localmente.\n  Variables locales: estas variables serán las que tienen ese valor solamente en alguna función o dentro del main, por lo que solo tendrán ese valor dentro de la misma función o del main y fuera de estos, la variable no existe\n  Variables globales: son las que están afuera del main y de alguna función, por lo que cuando se utilicen siempre tendrán el mismo valor\n\n\n  Instrucciones:\n  printf(“Hola, mundo!”); ➔ imprime en la pantalla lo que esta entre comillas.\n  Para ocupar una variable se coloca % y la letra que identifique el tipo de variable que se esta ocupando, por ejemplo si vamos a ocupar un número que es un (int) colocaremos %i y luego nombrarla.\n  Char ➔ %c\n  Double ➔ %f\n  Float ➔ %f\n  Int ➔ %i o %d\n  String ➔ %s\n\n  Ejemplo:\n  Int x=8;\n  Printf(“El numero asignado a x es %i”, x);\n\n  Y en la pantalla mostrará “el numero asignado a x es 8”\n\n\n  EJERCICIO CLASE 0\n  Cree un programa que sume dos variables e imprima el resultado.\n  Paso 1: Incluir librerías necesarias\n  Paso 2: crea el main\n  Paso 3: define dos variables del tipo que necesites con sus respectivos valores (pista: si necesitar sumar números enteros ocupa int, si necesitas sumar números decimales simples ocupa float, y no olvides cerrar la definición de variable con un ;)\n  Paso 4: Crea una tercera variable que guarde el resultado de la suma, para esto asignamos el valor cero a esta nueva variable\n  Paso 5: Ocupa tu tercera variable y asígnale la suma de tus dos primeras variables (pista: la suma se escribe así: resultado= 3+ 2; )\n  Paso 6: ocupa printf para imprimir tu variable (pista: recuerda que para utilizar tu variable debemos colocar %i (según el tipo de tu variable) y luego nombrarla.\n  Recuerda cerrar todos los corchetes y colocar los ; donde corresponda`\n}\n\nexport default clase0\n","const clase1 = {\n  title: 'Clase 1: ',\n  n: 1,\n  tags: ['scanf', 'condicionales', 'signos', 'if', 'for', 'iteraciones', 'ciclo'],\n  brief: `Aquí aprenderás a crear ciclos de iteraciones, los usos de condicionales, entre otras cosas. lo que será muy útil para tus siguientes programas`,\n  text: `SCANF\nLa función scanf() se utiliza principalmente para pedir información al usuario.\nPor ejemplo:\n#include <stdio.h>\nint main(){\nchar nombre[12];\nprintf(\"Introduce tu nombre: \");\nscanf(\"%s\",nombre);\nprintf(\"Hola, %s :)\\n\", nombre);\n return 0; }\nDonde la pedimos la información al usuario, especificando el tipo de variable que entrara y su nombre\nScanf(“%s(tipo de variable)”, nombre de la variable);\n\nSignos (< != || && \\\\ , %)\n\nPara asignar un valor se utiliza =, para preguntar si un numero es igual a otro se utiliza ==, y para negar se utiliza !.\n   Ejemplo de la negación:\n\n  If( x != 3) {\n    Código\n}\n\nAquí estamos diciendo que “Si x es distinto de 3 realiza el código”.\n\nPara comparar si es mayor, menor o igual se utiliza >, < y ==, respectivamente.\n\n\nPara escribir “ y ” , se utiliza &&, por ejemplo:\n           If (x ==3 && z ==4){\n              Código\n                       }\n  En el ejemplo estamos diciendo “ Si x es tres Y z es 4, realiza el código”.\n\n\nPara escribir “ o “, se utiliza || , por ejemplo:\nIf (x ==3 || z ==4){\nCódigo\n}\nEn el ejemplo estamos diciendo “Si x es 3 o z es 4, ejecuta el codigo\n\nCondicionales\nIf ➔ Ocupamos esta iteración para ejecutar una acción solamente si se cumple una condición\nPor ejemplo, Si x es menor que 7 , imprime en la pantalla “ soy menor a 7”\nIf(x<7){\nPrintf(“soy menor a 7”);\n}\nTambién podemos ocuparla , para que si se cumple la condición se ejecute una acción y si no, otra. Para esto ocuparemos else.\nIf(x<7){\nPrintf(“soy menor a 7”);\n}else {\nPrintf(“soy igual o mayor a 7”);\n}\n\nAdemás también podemos ocupar else if\n\nLa condición “ else if ”, la usamos cuando hay mas de una condición, la primera se escribe con un “if”, las demás con “else if”, y lo restante queda dentro del código del “else” .\n\n-Ejemplo :\n\n  if(x>y) {\n    printf(“el numero X es mayor que Y”); }\n\n else if(x<y){\n   printf(“El numero X es menor que Y”); }\n\nelse {\n   printf (“X e Y son iguales”); }\n\n\n\nEstructuras iterativas/loop\nfor ➔ Ocupamos esta iteración para ejecutar una acción la cantidad de veces que necesitemos\ny se expresa como\nfor (inicialización; condición de termino; actualización)\nPor ejemplo si queremos que una acción se repita 10 veces.\nFor (int i=0; i<10; i++){\nAcción ( puede ser un printf, o una suma, etc.)\n}\nAquí el “i”, actuara como contador, es decir partirá en cero y cada vez que se ejecute la acción se le sumará 1 a i (i++) y volverá a ejecutarla hasta que se cumpla la condición (i<10), entonces cada vez que se cumpla la condición (TRUE) ejecutara el código de la acción, por el contrario si la condición no se cumple (FALSE), no se ejecuta el código.\n\nEJERCICIO:\nCree variables de dos nombres de personas,\nluego cree la edad de cada uno.\nCree un ciclo for que muestre al usuario la edad que tendra cada cierta cantidad de años(Por ejemplo cada 6 años) y ademas mostrando el año en el que tendra esos años, hasta los 100 años.\nAdemas cree un if , para que si su edad es menor a 18 años, diga \"no preocupes por la edad aún.\"\n`\n}\n\nexport default clase1\n","const clase2 = {\n  title: 'Clase 2: ',\n  n: 2,\n  tags: ['while', 'arreglos', 'iteraciones', 'ciclos'],\n  brief: `Aquí aprenderas un nuevo ciclo, en el cual su termino será definido por la condición que necesites. Además encontrarás la manera de almacenar varias variables en una`,\n  text: `Tema 1:\n\nExpresiones booleanas (TRUE o FALSE)\nUna expresión booleana o expresión lógica es una expresión que vale o bien True o bien False.\n\nPodemos asignar el valor de una variable booleana mediante un if:\nbool igual;\nif (a == b)\n{\n    igual = true;\n}\nelse\n{\n    igual = false;\n}\nSin embargo, todo esto podemos escribir en una sólo línea:\n\nbool igual = a == b;\n\nWhile ➔ Ocupamos esta iteración para ejecutar una acción hasta que la condición de este se haga falsa.\n\nPor ejemplo, si queremos imprimir en la pantalla infinitamente “Hola, mundo” podemos escribir esto\nInt x =1;\nWhile (x=1){\nPrintf(“Hola, mundo”);}\n\nPero si quisiéramos escribirlo 100 veces lo podemos escribir así:\n Int cont=0;\nWhile (cont<100){\nPrintf(“Hola, mundo”);\nCont++\n}\n\nEJERCICIOS\nCree un programa que le pida una contraseña al usuario, y si ingresa la contraseña correcta, se le muestre “HAZ ADIVINADO LA CONTRASEÑA”\nTema 2:\n\nArreglos ➔ Permiten almacenar muchos valores en una misma variable.\n                   Para crear un arreglo se debe:\nDefinir tipo\nIndicar nombre de la variable\nTamaño del arreglo\n\nEjemplo: int a [5];  esto indica entonces que la variable a es un arreglo de 5 espacios. Tener en cuenta que se parte desde el arreglo cero, y termina en el arreglo 4.\n\n\n\n*Para llenar un arreglo se puede hacer de tres formas:\n\n   -Caso 1:   int a [5] = {1,9,3,4,8};\n\n   -Caso 2:   int a [5];\n                     a[0]=1;\n                     a[1]=9;\n                     a[2]=3;\n                     a[3]=4;\n                     a[4]=8;\n\n-Caso3: int a [5];\n  for (int i=0; i<5; i ++){\n scanf(\"%i\", a[i]);  \n}\n\nEJERCICIO:\nCree un arreglo con las notas de un alumno y luego calcule su promedio.\n`\n}\n\nexport default clase2\n","const clase3 = {\n  title: 'Clase 3: ',\n  n: 3,\n  tags: ['funciones', 'declaracion'],\n  brief: `Aprenderás a crear funciones que te serviran para ahorrar lineas de códigos y no repetirlas.`,\n  text: `Funciones\n\n-Para crear una función se debe tener en consideración lo siguiente:\nTener un único nombre.\nDebe aclarar un tipo de dato, si retorna o no un valor, sino lo hace debe emplear void.\nDebe indicar si recibe valores (parámetros) y de que tipo.\n\n-Ejemplo: int suma(int a, int b){\n                   int c;\n                   c=a+b;\n                   return(c);\n                 }\nEn el ejemplo el tipo de la función es “int”, ya que la función retornara un valor entero, los parámetros de entrada son “int a” y “int b”, esto quiere decir que la función recibe dos valores de tipo entero, finalmente el return, indica que se devolverá el valor de c, vale decir, la suma de a y b, a la función principal.\n\nEJERCICIO:\nCree funciones de calculadora(sumar, restar, dividir y multiplicar), luego crea dos variables de numeros  y muestra en la pantalla los resultados de todas las operaciones\n`\n}\n\nexport default clase3\n","const clase4 = {\n  title: 'Clase 4: ',\n  n: 4,\n  tags: ['busqueda', 'lineal', 'binaria'],\n  brief: `En este clase aprenderás como buscar un elemento dentro de un conjunto`,\n  text: `Busqueda Lineal  → La búsqueda lineal permite encontrar elementos dentro de un conjunto. Este tipo de búsqueda consiste básicamente en buscar un elemento de manera secuencial. Entonces vamos preguntando si el elemento que buscamos es igual al primero, al segundo, al tercero… (Así hasta encontrar el número que buscamos)\n\nBusqueda Binaria  la búsqueda binaria permite encontrar elementos dentro de un conjunto previamente ordenado\nEste algoritmo reduce el tiempo de búsqueda considerablemente, ya que disminuye exponencialmente el número de iteraciones necesarias.\nPara implementar este algoritmo se compara el elemento a buscar con un elemento cualquiera del conjunto (generalmente es el elemento central); si el valor de éste es mayor que el del elemento buscado se repite el procedimiento desde el inicio de éste hasta el elemento, en caso contrario se toma la parte del conjunto que va desde el elemento tomado hasta el final. De esta manera obtenemos intervalos cada vez más pequeños, hasta que se obtenga un intervalo indivisible. Si el elemento no se encuentra dentro de este último entonces se deduce que el elemento buscado no se encuentra en todo el conjunto.\n\nEJERCICIO:\n1. Escribe el código de un programa que cree arreglo de 100 números enteros\ngenerados de manera aleatoria.\nPista: Para esto ocupa rand()%N\nEsto te entrega valores aleatorias de 0 a n-1\nEj: int x= rand()%10;\nEste te entregara valores del 0 al 9.)\ny luego crea una variable con un nuemero.\n Si el número se encuentra en el arreglo, se debe indicar su posición. Sino se encuentra, se\ndebe desplegar un mensaje con esta información.\n2. Escribe el código de un programa que usa búsqueda binaria para buscar un número\nen un arreglo de números ordenados.`\n}\n\nexport default clase4\n","const clase5 = {\n  title: 'Clase 5: ',\n  n: 5,\n  tags: ['swap', 'algoritmo', 'ordenamiento', 'sort'],\n  brief: `Aprenderás a ordenar conjuntos\n  de datos en un arreglo usando cambio de posición`,\n  text: `Tema 1: SWAP\n\nSwap → Permite hacer intercambio de variables\nPara hacer un intercambio, no se hace directamente entre las dos variables, sino que necesitamos de una variable auxiliar, para explicar como funciona lo haremos a través de un ejemplo\nEjemplo: Para pasar de 34, 15   ---->  15, 34\n Int x = 34;\nInt y = 15;\nInt aux = 0;\n aux = x;  →  //asignamos el valor que tiene x, en este caso 34 a la variable aux.\n x=y;  → // asignamos el valor de la variable y, en este caso 15 a la variable x.\ny=aux; → // asignamos el valor que guarda aux en la variable y.\n\nTema 2: Algortimos de ordenamiento (parte 1)\nSelection Sort → Este es un algoritmo que permite ordenar los elementos de un conjunto. Selection Sort busca el menor número del conjunto y lo intercambia con el primero, quedando el número menor en un “lista ordenada” y el resto en una “desordenada”, luego vuelve a buscar el menor número de la lista desordenada y lo intercambia con el primer número de esa misma lista y este nuevo número que es menor queda en la lista ordenada, y así sucesivamente.\nEjemplo: Sea el conjunto {15, 1, 8, 6, 12}\nBusca el menor, en este caso es el 1, lo cambia con el primer número,  y queda el 1 en una lista ordenada  → {1, 15, 8, 6, 12}\nVuelve a buscar el menor entre la lista desordenada y lo intercambia con el primer número de la lista desordenada → {1,6,8,15,12}\nBusca el menor de la lista desordenada, en este caso el 8, y lo ubica (coincide en este caso que esta en la misma posición) → {1,6,8,15,12}\nEl menor de la lista desordenada es 12, entonces lo intercambia con el 15 → {1,6,8,12,15}\n\nSelection sort  Consiste en encontrar el menor de todos los elementos del arreglo e intercambiarlo con el que está en la primera posición. Luego el segundo mas pequeño, y así sucesivamente hasta ordenarlo todo.\nSu funcionamiento se puede definir de forma general como:\nBuscar el mínimo elemento entre una posición i y el final de la lista\nIntercambiar el mínimo con el elemento de la posición i\nAsí, se puede escribir el siguiente pseudocódigo para ordenar una lista de n elementos indexados desde el 1:\nvoid selectionsort(int * x, int n){\n\n  int minimo=0,i,j;\n  int swap;\n  for(i=0 ; i<n-1 ; i++)\n  {\n     minimo=i;\n     for(j=i+1 ; j<n ; j++)\n        if (x[minimo] > x[j])\n           minimo=j;\n     swap=x[minimo];\n     x[minimo]=x[i];\n     x[i]=swap;\n  }}\n\nEJERCICIO:\nCree un arreglo de 100 nuemero y luego ordenelos de mayor a menor(imprima el resultado)\n`\n}\n\nexport default clase5\n","const clase6 = {\n  title: 'Clase 6: ',\n  n: 6,\n  tags: ['bubble', 'sort', 'merge', 'ordenamiento'],\n  brief: `Esta clase es la continuación de la clase 5, por lo que seguiremos aprendiendo a ordenar conjuntos`,\n  text: `ALGORITMOS DE ORDENAMIENTO (parte 2)\n\nBubble Sort → Es un algoritmo usado para ordenar una secuencia de números\nSea el conjunto {5,9,3,1,2,8,4,7,6}\n-En este caso compara el 7 y el 6, si el número de la derecha es menor que el de la izquierda, entonces los números se intercambian (swap)\n → {5,9,3,1,2,8,4,6,7}\n-Una vez terminado este intercambio, se avanza una posición a la izquierda, y compara de nuevo e intercambia si  se cumple que el de la derecha sea menor, en el ejemplo comparara los números 4 y 6, y como el 6 no es menor que 4, se mantiene\n → {5,9,3,1,2,8,4,6,7}\n-Se avanza una posición a la izquierda y compara de nuevo, ahora entre el 4 y 8, en caso que se cumpla que el número de la derecha sea menor, los intercambia\n→ {5,9,3,1,2,4,8,6,7}\n- Se seguirá comparando hasta que se alcanza el extremo izquierdo, cuando el menor número del conjunto llega a la primera posición, se “fija”, quedando en una lista ordenada                                  →  {1,5,9,3,2,4,8,6,7}\n- Una vez que se fijó el valor, se devuelve al extremo  derecho y comienza a comparar de nuevo, en el ejemplo comparara el 6 y el 7, y como el 7 no es menor que 6, el orden queda igual. Luego avanzara y tomara el 8 y el 6, para compararlos, como se cumple que el 6 es menor que 8, hará un swap y los intercambiara → {1,5,9,3,2,4,6,8,7}.\n- Cuando llegue a comparar el 2 con el 3, los intercambiara, luego el 2 con el 9 también y finalmente el 2 con el 5 serán intercambiados de igual manera. Entonces quedara el 2 en la lista ordenada → {1,2,5,9,3,4,6,8,7}\n -Seguirá  así sucesivamente, avanzando, comparando e intercambiando en los casos necesarios hasta que quede todo ordenado.\nMerge sort \nEs un algoritmo de ordenamiento que funciona si inicialmente tenemos la lista desordenada, y la dividimos a la mitad, nos quedaremos con 2 sub-listas desordenadas, entonces, realizamos otra vez la misma acción: dividimos las sub-listas resultantes en 4 nuevas sub-listas, y así sucesivamente.\n\nEsta operación se realizará hasta que lleguemos a una sub-lista con 1 o 0 elementos en ella, que por defecto va a estar ordenada, y como dicha sub-lista ya está ordenada, la mezclamos con la de al lado, que está ordenada también, y así continuamente vamos ordenando las sub-listas hacia arriba para llegar al caso base.`\n}\n\nexport default clase6\n","const clase7 = {\n  title: 'Clase 7: ',\n  n: 7,\n  tags: ['recursion', 'funciones'],\n  brief: `Aqui aprenderás funciones recursivas`,\n  text: `-Recursión → La recursión es cuando una función se llama así misma.\n La recursión cuenta con:\n 1) CASO BASE: Condición de término.\n2) CASO REPETITIVO: Involucra volver a utilizar la función original, con parámetros que se acercan más al caso base.\nUno de los ejemplos más clásicos es el factorial de un número. Intenta seguir la explicación razonando cada paso. Para cualquier entero positivo N, el factorial de N (expresado como N!) es el producto de todos los enteros menor a él:\n\n1! = 1\n2! = 1 x 2 = 2\n3! = 1 x 2 x 3 = 6\n4! = 1 x 2 x 3 x 4 = 24\nObservaciones:\n-Se puede ver que el factorial de cada número incluye el factorial de todos los números anteriores a él\n- Para cualquier entero N mayor a 1, podemos decir que el factorial de N es igual al factorial del número anterior a N multiplicado por N. La fórmula N! = (N-1)! x N.\n-Entonces se podría decir que una buena técnica es encontrar el factor en el resultado que se repite.\n\nEJERCICIOS:\n1.Programe un algoritmo recursivo que permita sumar los elementos de un vector.\n2.Programe un algoritmo recursivo que permita multiplicar los elementos de un vector\n`\n}\n\nexport default clase7\n","const clase8 = {\n  title: 'Clase 8: ',\n  n: 8,\n  tags: ['punteros', 'swap', 'memoria'],\n  brief: `Aquí aprenderás punteros y podrás hacer un swap en la variable original y no en una copia`,\n  text: `Punteros\nUn puntero es una variable que contiene la dirección de memoria de otra variable.\nLos punteros permiten código más compacto y eficiente; utilizándolos en forma\nordenada dan gran flexibilidad a la programación.\nLa dirección de memoria de una variable se obtiene con el operador unario &.\nEl operador unario * permite la desreferencia de un variable puntero; es decir, permite\nel acceso a lo apuntado por un puntero.\nDado el ejemplo\nint x = 1, y = 2;\nint *ip; /* ip es un puntero a int */\nip = &x; /* ip apunta a x */\ny = *ip; /* a y se le asigna lo apuntado por ip */\n*ip = *ip + 3; /* incrementa lo apuntado por ip, x */\nip = NULL; /* ip apunta a direcc. especial (nada) */\n\nPara el cambio de variables ocupamos el swap anteriormente explicado en la clase 5\nPero este solamente genera una copia de la variable pero no cambia la original de valor. Para poder cambiar la original de valor hacemos un swap con punteros, como se muestra a continuación:\n#include <stdio.h>\nvoid intercambio(int *a, int *b);\nint main(void)\n{\n  int a=1;\n  int b=3;\n\n  printf(\"Valor de a: %i. Valor de b: %i\\n\", a,b);\n  intercambio(&a,&b);\n  printf(\"Valor de a: %i. Valor de b: %i\\n\", a,b);\n}\nvoid intercambio(int *a,int *b)\n{\n  int aux;\n\n  aux=*b;\n  *b =*a;\n  *a =aux;\n  printf(\"Dentro de función, a: %i, b:%i\\n\", *a,*b);\n}\n\nSi a una función se le entregan las direcciones de memoria de las variables (en vez de sus valores), la función puede acceder directamente al original (el contenido de la variable).\n\nEJERCICIO:\nRealice un programa que haga un swap con punteros.\n`\n}\n\nexport default clase8\n","const clase9 = {\n  title: 'Clase 9: ',\n  n: 9,\n  tags: ['estructuras'],\n  brief: `Aqui aprenderás a usar un conjunto de datos en forma de estructura`,\n  text: `ESTRUCTURAS\nStruct  Una estructura de datos es una forma de organizar un conjunto de datos elementales con el objeto de facilitar su manipulación.\nLa estructura de datos define la organización e interrelación de éstos y un conjunto de operaciones que se pueden realizar sobre ellos\nLas estructuras es la agrupación de elementos de distintos tipos de datos:\nStruct nombre_estructura {\n        Tipo_1    nombre_tipo_1;\n        Tipo_2    nombre_tipo_1;\n        …\n        Tipo_n    nombre_tipo_n;\n};\nEjemplo:\nStruct cuenta_banco{\nString nombre;\nLong float saldo;\nLong int cuenta;\nString RUT;\n};\nPara almacenar datos en la variable se debe escribir:\n<variable>.<nombre_campo>\npor ejemplo cta1.\nStruct cuenta_banco Cta1;\nscanf(\"%s\", Cta1.nombre);  \nCta2.saldo = 4300;\nscanf(\"%i\", Cta1.cuenta);  \nscanf(\"%s\",Cta1.Rut);  \nTambien puedes ocupar un arreglo para hacer varias variables e ir rellenándola\nPor ejemplo:\nint main()\n{\n    int i;\n    struct ficha cliente[10];\n    for (i=0;i<10;i++){\n       printf(\"Ingrese nombre: \");\n       scanf(\"%s\", cliente[i].nombre);  \n\n    }\n}\nAdemás también se pueden agregar estructuras dentro de otras estructuras, como muestra el siguiente ejemplo:\n#include <stdio.h>\n#include <cs50.h>\nstruct ficha{\n\tstring nombre;\n\tint   sexo;\n\tstring RUT;\n\tint   edad;\n};\nstruct familia{\n\tstruct ficha padre;\n \tstruct ficha madre;\n   \tstruct ficha hijo[4];\n};\nint main()\n{\n\tstruct familia fm1;\n\n   \tprintf(\"Ingrese nombre hijo 1: \");\n       scanf(\"%s\", fm1.hijo[0].nombre);  \n}\n\nEjercicio\nRealice un programa que almacene los datos personales de una persona: Nombre, apellido, RUT, teléfono, edad, y luego imprima los datos ingresados\nImplemente un programa que almacene los datos de 3 personas: nombre, día de nacimiento, mes de nacimiento, y año de nacimiento (que se deben almacenar en una tabla de structs). Después deberá repetir lo siguiente: Elegir un numero de mes y mostrar en pantalla los datos de las personas que cumplan los años durante ese mes.\n`\n}\n\nexport default clase9\n","const clase10 = {\n  title: 'Clase 10: ',\n  n: 10,\n  tags: ['archivos'],\n  brief: `Aprenderás a crear, escribir y leer, dentro de un archivo de texto`,\n  text: `ARCHIVOS\nLectura de archivos:\n      Abrir archivo: Los archivos pueden ser abiertos para lectura, escritura o insersión. Para ello debemos especificar que queremos hacer.\n\tw abre un archivo para escritura. Se crea si no existe\n        a  abre un archivo para escritura al final del archivo\n        r  abre un archivo para lectura(el archivo debe existir\n        w+  Crea un archivo para lectura y escritura\n       a+  abre/crea un archivo para lectura y escritura al final del archivo\n        r+  abre un archivo para lectura y escritura (el archivo debe existir)\nPara crear una variable de tipo archivo debemos escribir FILE* (nombrevariable);\nPara abrir el archivo ocupamos fopen:\nLa función fopen tiene dos argumentos. En el primero escribimos el nombre del archivo. En el segundo el tipo de apertura.\narchivo = fopen (\"ejemplo.txt\", \"r\");\nEs importante que después de abrir un archivo siempre debemos cerrarlo con fclose\nfclose(archivo);\nLeer archivos:\nPara leer archivos ocupamos la función fgets, que nos permitirá leer una determinada cantidad de caracteres.\nfgets(buffer, caracteres,file)\npor ejemplo:\n#include<stdio.h>\nint main()\n{\n FILE *archivo;\n char buffer[100];\n archivo = fopen(\"ejemplo.txt\", \"r\");\n fgets(buffer, 12, archivo);\nprintf(\"%s\",buffer);\nfclose (archivo);\n}\nLa función fscanf es casi lo mismo que scanf excepto que el primer argumento es el puntero del archivo.\nfscanf(*file, format, *char)\npor ejemplo:\n#include<stdio.h>\nint main()\n{\n FILE *archivo;\n char buffer[100];\n archivo = fopen(\"ejemplo.txt\", \"r\");\n fscanf(archivo, \"%s\",buffer);\n\n printf(\"%s\",buffer);\n fclose (archivo);\n}\nTambien tenemos la función feof que devuelve cero(Falso) si NO es encontrado el final del archivo, esta la podemos ocupar para poder leer el archivo completo como muestra el siguiente ejemplo:\n#include<stdio.h>\nint main()\n{\n FILE *archivo;\n char buffer[100];\n archivo = fopen(\"ejemplo.txt\", \"r\" );\n if (archivo!=NULL)\n {\n while (!feof(archivo))\n{\n fscanf(archivo, \"%s\",buffer);\n printf(\"%s\",buffer);\n }\nfclose (archivo);\n}\nelse\n{\nprintf(\"Error: Archivo no pudo ser abierto\");\n}\n}\nEscritura de Archivos:\nPara la escritura de archivos ocupamos la función fprintf que es casi lo mismo que printf excepto que el primer argumento es el puntero de archivo.\nfprintf(*FILE, formato, *char)\nejemplo:\n#include<stdio.h>\nint main()\n{\n FILE *archivo;\n char buffer[100]= \"chao a todos\";\n archivo = fopen(\"ejemplo.txt\", \"r+\");\n fprintf(archivo,\"%s\", buffer);\n\n fclose (archivo);\n}`\n}\nexport default clase10\n","import React from 'react'\nimport Clases from './Clases'\n\nconst ejercicios = {\n  title: 'Ejercicios y desafios',\n  n: 'ejercicios',\n  text: `EJERCICIOS\n  1.- Cree un programa que permita hacer la división por restas sucesivas, utilizando recursividad.\n\n  2.- Programe un algoritmo que permita dar vuelta un numero, utilizando recursión. Ejemplo sea el numero de entrada 123, el numero de salida debe ser 321.\n\n  3. Cree un programa que permita calcular la multiplicación, utilizando recursión.\n\n  4. Cree un programa que te diga si la palabra es palindroma o no.\n\n  5. Implemente un programa de 3 alumnos guardar nombre, nombre de la asignatura y 4 notas. Calcular y mostrar el promedio y la suma de las notas.\n\n  6. Escribe el código de la función busca_max() que retorna la posición del elemento del arreglo numeros[] con el máximo valor entre las posiciones inicio y final (inclusive).\n\n  7. Cree un programa que te indique si el numero es par o impar\n\n  8. Cree un programa que indique si el numero es primo o no\n\n  9. Cree variables de 5 nombres, luego muéstrale la ultima letra de cada uno de ellos y finalmente muéstrale los nombres dados vuelta.\n\n  10. Escribe el código de la función intercambia_3() que intercambia los valores de 3 posiciones de un arreglo, que ha sido declarado como variable global en el programa. La función no tiene valor de retorno y toma como parámetros de entrada las 3 posiciones cuyos valores se intercambian. Si los nombres de los parámetros de entrada son pos1, pos2 y pos3, entonces la función escribe el contenido de pos3 en pos1, el de pos1 en pos2 y el de pos2 en pos3.\n\n  DESAFÍO:\n  Cree un programa que entregue el numero identificar del rut .\n  Para eso debes :\n  tomar los numero del rut, sin contar el digito verificador\n  Dar vuelta esos números\n  Tome los numero y vaya multiplicando cada uno de ellos por la siguiente serie de numero : 2,3,4,5,6,7… en ese orden.Si se le acaban los números de la serie, vuelva a usarla desde el principio\n  Una vez que haya multiplicado cada uno de los números, sume los resultados obtenidos\n  Divida el numero obtenido por 11 y obtenga el resto\n  Al numero 11 restele el resto de la división anterior\n  Ahora hay que analizar el numero obtenido:\n        Hay tres posibilidades:\n  Si el numero obtenido es 1, 2,3, 4,5,6,7,8 o 9 ese es el digito verificador\n  Si el numero obtenido es 11, el digito verificador es cero.\n  Si el numero obtenido es 10, el digito verificador es k.`\n}\n\nconst Ejercicios = () => <Clases clase={ejercicios} />\n\nexport default Ejercicios\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { listaClases } from './Clases'\n\nlet datos = {}\n\nlistaClases.forEach(clase => {\n  clase.tags.forEach(tag => {\n    if (datos[tag]) {\n      datos[tag].push(clase)\n    } else {\n      datos[tag] = [clase]\n    }\n  })\n})\n\nconst Indice = (props) => {\n  const [ state, setState ] = useState({ listaClases })\n\n  const busca = (event) => {\n    let value = event.target.value.toLowerCase()\n\n    if (value === '') {\n      setState({ listaClases })\n    } else {\n      let { length } = value\n      let devolver = []\n      let llaves = Object.keys(datos)\n      llaves.forEach(llave => {\n        if (llave.slice(0, length) === value) {\n          devolver.push(datos[llave][0])\n        }\n      })\n      setState({ listaClases: devolver })\n    }\n  }\n  return (\n    <>\n      <div className='nav-wrapper container'>\n        <form>\n          <div className='input-field'>\n            <input onChange={busca} id='search' type='search' required />\n            <label className='label-icon' htmlFor='search'><i className='material-icons'>search</i></label>\n            <i className='material-icons'>close</i>\n          </div>\n        </form>\n      </div>\n\n      <div className='row'>\n        { state.listaClases.map((clase, i) => {\n          return (\n            <div key={Math.random()} className='col s4'>\n              <div className='card blue-grey darken-3'>\n                <div className='card-content white-text'>\n                  <span className='card-title'>{clase.title}</span>\n                  <p>{clase.brief}</p>\n                </div>\n                <div className='card-action blue-grey darken-2 '>\n                  <Link to={'/clases/' + i} >Ir a la clase!</Link>\n                </div>\n              </div>\n            </div>\n          )\n        })\n        }\n      </div>\n    </>\n  )\n}\n\nexport default Indice\n","import React from 'react'\n\nconst Portada = (props) => {\n  return (\n    <>\n      <div className='section jumbotron'>\n        <div className='row'>\n          <div className='col s4 offset-s4'>\n            <h1 className='center-align' > LO </h1>\n            <h1 className='center-align'> DAMOS </h1>\n            <h1 className='center-align'> VUELTA </h1>\n          </div>\n        </div>\n      </div>\n      <div className='section'>\n        <div className='col s4'>\n          <h6>Aprende!</h6>\n          <i className='medium material-icons'>thumb_up</i>\n          <p>Aquí podrás aprender todo lo necesario para programar en lenguaje C</p>\n        </div>\n        <div className='col s4'>\n          <h6>Practica!</h6>\n          <i className='medium material-icons'>grade</i>\n          <p>También podrás aplicar lo aprendido con diversos ejercicios</p>\n        </div>\n        <div className='col s4'>\n          <h6>Desafiate!</h6>\n          <i className='medium material-icons'>trending_up</i>\n          <p>Encontraras dificiles desafíos... pero lo lograras!</p>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Portada\n","import React, { useState, useEffect, useContext } from 'react'\nimport { database } from '../firebase'\n\nimport { Store } from '../Store'\n\nconst Estadisticas = (props) => {\n  const [ data, setData ] = useState([': ninguna'])\n  const { state } = useContext(Store)\n\n  useEffect(() => {\n    const nameRef = database.ref().child('vistos').child(state.user.uid)\n    nameRef.on('value', snapshot => {\n      let value = snapshot.val()\n      if (value) {\n        setData(value)\n      }\n    })\n  }, [])\n\n  return (\n    <div className='row'>\n      <h5>Haz hecho: </h5>\n      {data.map(clase => {\n        return (\n          <p key={Math.random()}>Clase {clase}</p>\n        )\n      })}\n      <button onClick={() => props.signOut()} className='col s12 waves-effect waves-light btn'>Salir</button>\n    </div>\n  )\n}\n\nexport default Estadisticas\n","import React, { useContext, useState } from 'react'\nimport Estadisticas from './Estadisticas'\nimport { Store } from '../Store'\nimport { auth } from '../firebase'\n\nconst Usuario = (props) => {\n  const { state, dispatch } = useContext(Store)\n  const [ passwordField, setPasswordField ] = useState('')\n  const [ emailField, setEmailField ] = useState('')\n  const [ passwordConfField, setPasswordConfField ] = useState('')\n  const [ loginOrRegister, setLoginOrRegister ] = useState({\n    val: true,\n    text1: 'Entrar',\n    text2: 'Todavia no tengo cuenta'\n  })\n\n  const login = async (email, pass) => {\n    const user = await auth.signInWithEmailAndPassword(email, pass)\n    dispatch({ type: 'USER_LOGIN', payload: user })\n  }\n\n  const signUp = async (email, pass, passconf) => {\n    if (pass === passconf) {\n      const user = await auth.createUserWithEmailAndPassword(email, pass)\n      dispatch({ type: 'USER_LOGIN', payload: user })\n    } else {\n      console.warn('contraseña no coincide')\n    }\n  }\n  const signOut = async () => {\n    await auth.signOut()\n    dispatch({ type: 'USER_LOGIN', payload: '' })\n  }\n\n  const toggleLoginOrRegister = (e) => {\n    e.preventDefault()\n    if (loginOrRegister.val) {\n      setLoginOrRegister({\n        val: false,\n        text1: 'Registrarse',\n        text2: 'Ya tengo cuenta'\n      })\n    } else {\n      setLoginOrRegister({\n        val: true,\n        text1: 'Entrar',\n        text2: 'Todavia no tengo cuenta'\n      })\n    }\n  }\n\n  const submitData = (e) => {\n    e.preventDefault()\n    if (loginOrRegister.val) {\n      login(emailField, passwordField)\n    } else {\n      signUp(emailField, passwordField, passwordConfField)\n    }\n  }\n\n  const confirmPass = (\n    <div className='row'>\n      <div className='input-field col s12'>\n        <input onChange={event => setPasswordConfField(event.target.value)} id='password2' type='password' className='validate' />\n        <label htmlFor='password2'>Repita contraseña</label>\n      </div>\n    </div>\n  )\n  return (\n    <div className='container'>\n      <h3>{state.user ? 'Salir' : loginOrRegister.text1}</h3>\n      {state.user ? <Estadisticas user={state.user} signOut={signOut} /> : (\n        <div className='row'>\n          <form className='col s12' >\n            <div className='row'>\n              <div className='input-field col s12'>\n                <input onChange={event => setEmailField(event.target.value)} id='email' type='email' className='validate' />\n                <label htmlFor='email'>Email</label>\n              </div>\n            </div>\n            <div className='row'>\n              <div className='input-field col s12'>\n                <input onChange={event => setPasswordField(event.target.value)} id='password' type='password' className='validate' />\n                <label htmlFor='password'>Contraseña</label>\n              </div>\n            </div>\n            {!loginOrRegister.val && confirmPass}\n            <button onClick={submitData} className='col s12 waves-effect waves-light btn blue-grey darken-2'>{loginOrRegister.text1}</button>\n            <button onClick={toggleLoginOrRegister} className='col s12 waves-effect waves-light btn blue-grey darken-2'>{loginOrRegister.text2}</button>\n          </form>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Usuario\n","import React from 'react'\n\nfunction NotFoundComponent () {\n  return <h1>404 - Sorry this page is not found</h1>\n}\n\nexport default NotFoundComponent\n","import React from 'react'\nimport Clases, { listaClases } from './Clases'\n// import { Redirect } from 'react-router-dom'\nimport NotFound from './NotFound'\n\nconst DataFeededLesson = ({ match }) => {\n  if (match.params.id < listaClases.length && match.params.id >= 0) {\n    return (\n      <Clases clase={listaClases[match.params.id]} />\n    )\n  } else {\n    return (\n      <NotFound />\n    )\n  }\n}\n\nexport default DataFeededLesson\n","import React from 'react' // importa libreria de react\n\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Header from './Header'\nimport Footer from './Footer'\nimport Ejercicios from './paginas/Ejercicios'\nimport Indice from './paginas/Indice'\nimport Portada from './paginas/Portada'\nimport Usuario from './paginas/Usuario'\nimport NotFoundComponent from './paginas/NotFound'\nimport DataFeededLesson from './paginas/DataFeededLesson'\n\nconst App = (props) => {\n  return (\n    <Router basename={process.env.PUBLIC_URL} >\n      <Header />\n      <Switch>\n        <Route exact path='/' component={Portada} />\n        <Route exact path='/indice' component={Indice} />\n        <Route exact path='/lessons' component={Ejercicios} />\n        <Route exact path='/user' component={Usuario} />\n        <Route path='/clases/:id' component={DataFeededLesson} />\n        <Route component={NotFoundComponent} />\n      </Switch>\n      <Footer />\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react' // importa react\nimport ReactDOM from 'react-dom' // importa la funcion para \"meter\" el componente de react al html\nimport App from './App' // importa el componente app que creamos\nimport { StoreProvider } from './Store'\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')) // mete app al html\n"],"sourceRoot":""}