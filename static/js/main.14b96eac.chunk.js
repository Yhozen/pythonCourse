(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{107:function(e,a,n){},108:function(e,a,n){"use strict";n.r(a);var r=n(0),o=n.n(r),i=n(44),t=n.n(i),s=n(7),l=n(12),c=n(2),u=n(50),m=window.localStorage;var d=o.a.createContext({}),p=function(e,a){switch(a.type){case"USER_LOGIN":return Object(u.a)({},e,{user:a.payload});default:return e}};var b=function(e){var a=Object(r.useContext)(d).state;return o.a.createElement("header",null,o.a.createElement("nav",null,o.a.createElement("div",{className:"nav-wrapper blue-grey darken-4"},o.a.createElement(s.c,{to:"/",className:"brand-logo"},"#LoDamosVuelta"),o.a.createElement("ul",{id:"nav-mobile",className:"right hide-on-med-and-down"},o.a.createElement("li",null,o.a.createElement(s.c,{activeClassName:"active",to:"/"},"Inicio")),o.a.createElement("li",null,o.a.createElement(s.c,{activeClassName:"active",to:"/indice"},"Clases")),o.a.createElement("li",null,o.a.createElement(s.c,{activeClassName:"active",to:"/lessons"},"Ejercicios")),o.a.createElement("li",null,o.a.createElement(s.c,{activeClassName:"active",to:"/user"},a.user?a.user.email:"Usuario"))))))},f=function(e){return o.a.createElement("footer",{className:"page-footer blue-grey darken-4"},o.a.createElement("div",{className:"container"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col l6 s12"},o.a.createElement("h5",{className:"white-text"},"Quienes Somos"),o.a.createElement("p",{className:"grey-text text-lighten-4"},"-Christian Amo -Francisca Inostroza",o.a.createElement("br",null)," -Axel Kuljis  -Nicolas Manzano  ",o.a.createElement("br",null)," -Gabriel P\xe9rez     -Valeria Ruiz")),o.a.createElement("div",{className:"col l4 offset-l2 s12"},o.a.createElement("h5",{className:"white-text"},"Sitios de Inter\xe9s"),o.a.createElement("ul",null,o.a.createElement("li",null,o.a.createElement("a",{className:"grey-text text-lighten-3",href:"http://www.uai.cl"},"Universidad Adolfo Ib\xe1\xf1ez")),o.a.createElement("li",null,o.a.createElement("a",{className:"grey-text text-lighten-3",href:"http://webcursos.uai.cl"},"WebCursos")),o.a.createElement("li",null,o.a.createElement("a",{className:"grey-text text-lighten-3",href:"https://cs50.harvard.edu/"},"CS50 Harvard")))))))},v=n(8),g=n.n(v),h=n(15),E=n(47),q=n(17);q.initializeApp({apiKey:"AIzaSyCCjnc1Ri6KAaWaT7R1oyI88EcINEeuINc",authDomain:"lodamosvuelta-64d7a.firebaseapp.com",databaseURL:"https://lodamosvuelta-64d7a.firebaseio.com",projectId:"lodamosvuelta-64d7a",storageBucket:"lodamosvuelta-64d7a.appspot.com",messagingSenderId:"163822376534"});var y=q.database(),x=q.auth(),j=n(49),C=(n(103),n(104),n(105),n(106),n(107),function(e){var a=Object(E.a)("state-clase-".concat(e.clase.n)),i=Object(r.useContext)(d).state.user,t=Object(r.useState)(""),s=Object(c.a)(t,2),l=s[0],u=s[1],m=a(""),p=Object(c.a)(m,2),b=p[0],f=p[1],v="",q=function(e){u(v+=e)},x=function(){var e=Object(h.a)(g.a.mark(function e(a){var r,o,i;return g.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return i=function(e){if(void 0===o.builtinFiles||void 0===o.builtinFiles.files[e])throw Error("File not found:");return o.builtinFiles.files[e]},a.preventDefault(),e.next=4,n.e(2).then(n.t.bind(null,109,7));case 4:return e.next=6,n.e(3).then(n.t.bind(null,110,7));case 6:v="",r=window,(o=r.Sk).configure({output:q,read:i}),o.misceval.asyncToPromise(function(){return o.importMainWithBody("<stdin>",!1,b,!0)}).then(function(e){},function(e){u(e.toString())});case 11:case"end":return e.stop()}},e)}));return function(a){return e.apply(this,arguments)}}();return o.a.createElement("div",{className:"row",onSubmit:x},o.a.createElement("div",{className:"col s4"},o.a.createElement("h5",null,e.clase.title),o.a.createElement("div",{className:"texto-clases"},o.a.createElement("pre",null,e.clase.text))),o.a.createElement("form",{className:"col s4"},o.a.createElement("div",{className:"row",style:{marginTop:"3px"}},o.a.createElement(j.Controlled,{value:b,options:{theme:"material",lineNumbers:!0},onBeforeChange:function(e,a,n){f(n)},onChange:function(e,a,n){}})),o.a.createElement("button",{className:"waves-effect waves-light btn blue-grey darken-2",type:"submit",value:"Submit"},"COMPILAR"),i&&o.a.createElement("button",{className:"waves-effect waves-light btn blue-grey darken-2",onClick:function(){var a=y.ref().child("vistos").child(i.uid),n=e.clase.n;a.on("value",function(e){var r=e.val();r?r.includes(n)||(r.push(n),a.set(r)):a.set([n])})}},"HECHO ")),o.a.createElement("div",{className:"col s4 console"},o.a.createElement("h5",null,"OUTPUT"),o.a.createElement("div",{id:"console"},l)))}),N=[{title:"Clase 0: Introducci\xf3n",n:0,tags:["funciones","variables","b\xe1sico","librerias","hello","world","main","tipo","datos"],brief:"Este es el punto de partida. Aprender\xe1s lo m\xe1s b\xe1sico de la programaci\xf3n.",text:"\xbfQu\xe9 es una funci\xf3n?\n  Una funci\xf3n es un bloque de c\xf3digo que realiza alguna operaci\xf3n.\n  Par\xe1metros:\n  Una funci\xf3n debe definir par\xe1metros de entrada que permiten a los llamadores pasar argumentos a la funci\xf3n.\n  Return:\n  Una funci\xf3n tambi\xe9n puede devolver un valor como salida.\n  Librer\xedas:\n  Es un conjunto o colecci\xf3n de subprogramas usados para desarrollar software\n  Se pueden entender como un conjunto de funciones reutilizables.\n  Por ejemplo si necesitas crear un programa relacionado con las matem\xe1ticas, no es necesario crear las funciones que multipliquen o dividan, ya que est\xe1n en una librer\xeda (#include<math.h>)\n  Siempre se deben escribir como #include<nombre_libreria.h>\n  Ejemplos de algunas funciones que contienen las librer\xedas m\xe1s comunes:\n\n  Math.h :\n  Ceil\n  Floor\n  Pow\n  Ctype.h:\n  Toupper\n  Stdio.h:\n  Fclose\n  Feof\n  Fgets\n  Fopen\n  Printf\n  Stdlib.h:\n  Atof\n  Malloc\n  String.h :\n  Strlen\n\n  Main:\n  Es la funci\xf3n principal.\n  La funci\xf3n main es el punto de entrada de cualquier programa en c, es donde se inicia la ejecuci\xf3n del programa.\n  Cada programa en c tiene una funci\xf3n main ()\n  La funci\xf3n principal se trata igual que todas las funciones, es decir, tiene un tipo de retorno y par\xe1metros de entrada(void). La \xfanica diferencia es que la funci\xf3n principal es \u201cllamada\u201d por el sistema cuando el usuario ejecuta el programa.\n  Por lo tanto, la funci\xf3n principal es siempre el primer c\xf3digo ejecutado cuando se inicia el programa\n  El main debe estar entre corchetes, y adem\xe1s siempre ser\xe1 int main(void),\n  Ejemplo:\n  #include<stdio.h>\n\n  int main (void) {\n  c\xf3digo a ejecutar.\n  }\n\n  Variables : \xbfQu\xe9 son? \xbfPara que sirven? \xbfQu\xe9 tipos hay? (locales y globales)\n  Permiten almacenar informaci\xf3n, se puede facilitar la comprensi\xf3n de una variable si son entendidas como una caja que guarda algo.\n  Para definir una variable debemos asignarle un tipo:\n  Char \u2794 para guardar un car\xe1cter\n  Int \u2794  para guardar enteros\n  Long \u2794 para guardar enteros largos\n  Float \u2794 para guardar decimales simples\n  Double \u2794 para guardar decimales dobles\n  String \u2794 sirve para guardar un arreglo de caracteres, es decir un conjunto de char, por ejemplo string s=\u201chola\u201d;\n  En la caja s quedara la palabra hola\n\n  Syntax \u2794\n  Aqu\xed declaramos una variable\n  Tipo_variable nombre = value;\n  Donde el tipo seria, char , int, etc.\n  Nombre es el que le queremos dar a la variable\n  Tener en cuenta que: el nombre de una variable no puede tener espacio, se recomienda utilizar gui\xf3n bajo para reemplazar el espacio, adem\xe1s tambi\xe9n se recomienda colocarle un nombre que podamos identificar, para facilitar su uso y la lectura del c\xf3digo posteriormente\n  Y con el = le asignamos el valor (value)\n  Ejemplo : int b = 3;\n  La variable b, es de tipo int, y tendr\xe1 el valor 3.\n  Se puede entender como una caja llamada \u201cb\u201d, la cual guarda solo n\xfameros enteros(porque se defini\xf3 como int) y en este caso particular se est\xe1 asignando el valor  3, por lo tanto dentro de la caja \u201cb\u201d, se encuentra guardado el numero 3\n  Para utiliza una variable, debe ser primero declarada.\n  Las variables se pueden guardar global y localmente.\n  Variables locales: estas variables ser\xe1n las que tienen ese valor solamente en alguna funci\xf3n o dentro del main, por lo que solo tendr\xe1n ese valor dentro de la misma funci\xf3n o del main y fuera de estos, la variable no existe\n  Variables globales: son las que est\xe1n afuera del main y de alguna funci\xf3n, por lo que cuando se utilicen siempre tendr\xe1n el mismo valor\n\n\n  Instrucciones:\n  printf(\u201cHola, mundo!\u201d); \u2794 imprime en la pantalla lo que esta entre comillas.\n  Para ocupar una variable se coloca % y la letra que identifique el tipo de variable que se esta ocupando, por ejemplo si vamos a ocupar un n\xfamero que es un (int) colocaremos %i y luego nombrarla.\n  Char \u2794 %c\n  Double \u2794 %f\n  Float \u2794 %f\n  Int \u2794 %i o %d\n  String \u2794 %s\n\n  Ejemplo:\n  Int x=8;\n  Printf(\u201cEl numero asignado a x es %i\u201d, x);\n\n  Y en la pantalla mostrar\xe1 \u201cel numero asignado a x es 8\u201d\n\n\n  EJERCICIO CLASE 0\n  Cree un programa que sume dos variables e imprima el resultado.\n  Paso 1: Incluir librer\xedas necesarias\n  Paso 2: crea el main\n  Paso 3: define dos variables del tipo que necesites con sus respectivos valores (pista: si necesitar sumar n\xfameros enteros ocupa int, si necesitas sumar n\xfameros decimales simples ocupa float, y no olvides cerrar la definici\xf3n de variable con un ;)\n  Paso 4: Crea una tercera variable que guarde el resultado de la suma, para esto asignamos el valor cero a esta nueva variable\n  Paso 5: Ocupa tu tercera variable y as\xedgnale la suma de tus dos primeras variables (pista: la suma se escribe as\xed: resultado= 3+ 2; )\n  Paso 6: ocupa printf para imprimir tu variable (pista: recuerda que para utilizar tu variable debemos colocar %i (seg\xfan el tipo de tu variable) y luego nombrarla.\n  Recuerda cerrar todos los corchetes y colocar los ; donde corresponda"},{title:"Clase 1: ",n:1,tags:["scanf","condicionales","signos","if","for","iteraciones","ciclo"],brief:"Aqu\xed aprender\xe1s a crear ciclos de iteraciones, los usos de condicionales, entre otras cosas. lo que ser\xe1 muy \xfatil para tus siguientes programas",text:'SCANF\nLa funci\xf3n scanf() se utiliza principalmente para pedir informaci\xf3n al usuario.\nPor ejemplo:\n#include <stdio.h>\nint main(){\nchar nombre[12];\nprintf("Introduce tu nombre: ");\nscanf("%s",nombre);\nprintf("Hola, %s :)\n", nombre);\n return 0; }\nDonde la pedimos la informaci\xf3n al usuario, especificando el tipo de variable que entrara y su nombre\nScanf(\u201c%s(tipo de variable)\u201d, nombre de la variable);\n\nSignos (< != || && \\ , %)\n\nPara asignar un valor se utiliza =, para preguntar si un numero es igual a otro se utiliza ==, y para negar se utiliza !.\n   Ejemplo de la negaci\xf3n:\n\n  If( x != 3) {\n    C\xf3digo\n}\n\nAqu\xed estamos diciendo que \u201cSi x es distinto de 3 realiza el c\xf3digo\u201d.\n\nPara comparar si es mayor, menor o igual se utiliza >, < y ==, respectivamente.\n\n\nPara escribir \u201c y \u201d , se utiliza &&, por ejemplo:\n           If (x ==3 && z ==4){\n              C\xf3digo\n                       }\n  En el ejemplo estamos diciendo \u201c Si x es tres Y z es 4, realiza el c\xf3digo\u201d.\n\n\nPara escribir \u201c o \u201c, se utiliza || , por ejemplo:\nIf (x ==3 || z ==4){\nC\xf3digo\n}\nEn el ejemplo estamos diciendo \u201cSi x es 3 o z es 4, ejecuta el codigo\n\nCondicionales\nIf \u2794 Ocupamos esta iteraci\xf3n para ejecutar una acci\xf3n solamente si se cumple una condici\xf3n\nPor ejemplo, Si x es menor que 7 , imprime en la pantalla \u201c soy menor a 7\u201d\nIf(x<7){\nPrintf(\u201csoy menor a 7\u201d);\n}\nTambi\xe9n podemos ocuparla , para que si se cumple la condici\xf3n se ejecute una acci\xf3n y si no, otra. Para esto ocuparemos else.\nIf(x<7){\nPrintf(\u201csoy menor a 7\u201d);\n}else {\nPrintf(\u201csoy igual o mayor a 7\u201d);\n}\n\nAdem\xe1s tambi\xe9n podemos ocupar else if\n\nLa condici\xf3n \u201c else if \u201d, la usamos cuando hay mas de una condici\xf3n, la primera se escribe con un \u201cif\u201d, las dem\xe1s con \u201celse if\u201d, y lo restante queda dentro del c\xf3digo del \u201celse\u201d .\n\n-Ejemplo :\n\n  if(x>y) {\n    printf(\u201cel numero X es mayor que Y\u201d); }\n\n else if(x<y){\n   printf(\u201cEl numero X es menor que Y\u201d); }\n\nelse {\n   printf (\u201cX e Y son iguales\u201d); }\n\n\n\nEstructuras iterativas/loop\nfor \u2794 Ocupamos esta iteraci\xf3n para ejecutar una acci\xf3n la cantidad de veces que necesitemos\ny se expresa como\nfor (inicializaci\xf3n; condici\xf3n de termino; actualizaci\xf3n)\nPor ejemplo si queremos que una acci\xf3n se repita 10 veces.\nFor (int i=0; i<10; i++){\nAcci\xf3n ( puede ser un printf, o una suma, etc.)\n}\nAqu\xed el \u201ci\u201d, actuara como contador, es decir partir\xe1 en cero y cada vez que se ejecute la acci\xf3n se le sumar\xe1 1 a i (i++) y volver\xe1 a ejecutarla hasta que se cumpla la condici\xf3n (i<10), entonces cada vez que se cumpla la condici\xf3n (TRUE) ejecutara el c\xf3digo de la acci\xf3n, por el contrario si la condici\xf3n no se cumple (FALSE), no se ejecuta el c\xf3digo.\n\nEJERCICIO:\nCree variables de dos nombres de personas,\nluego cree la edad de cada uno.\nCree un ciclo for que muestre al usuario la edad que tendra cada cierta cantidad de a\xf1os(Por ejemplo cada 6 a\xf1os) y ademas mostrando el a\xf1o en el que tendra esos a\xf1os, hasta los 100 a\xf1os.\nAdemas cree un if , para que si su edad es menor a 18 a\xf1os, diga "no preocupes por la edad a\xfan."\n'},{title:"Clase 2: ",n:2,tags:["while","arreglos","iteraciones","ciclos"],brief:"Aqu\xed aprenderas un nuevo ciclo, en el cual su termino ser\xe1 definido por la condici\xf3n que necesites. Adem\xe1s encontrar\xe1s la manera de almacenar varias variables en una",text:'Tema 1:\n\nExpresiones booleanas (TRUE o FALSE)\nUna expresi\xf3n booleana o expresi\xf3n l\xf3gica es una expresi\xf3n que vale o bien True o bien False.\n\nPodemos asignar el valor de una variable booleana mediante un if:\nbool igual;\nif (a == b)\n{\n    igual = true;\n}\nelse\n{\n    igual = false;\n}\nSin embargo, todo esto podemos escribir en una s\xf3lo l\xednea:\n\nbool igual = a == b;\n\nWhile \u2794 Ocupamos esta iteraci\xf3n para ejecutar una acci\xf3n hasta que la condici\xf3n de este se haga falsa.\n\nPor ejemplo, si queremos imprimir en la pantalla infinitamente \u201cHola, mundo\u201d podemos escribir esto\nInt x =1;\nWhile (x=1){\nPrintf(\u201cHola, mundo\u201d);}\n\nPero si quisi\xe9ramos escribirlo 100 veces lo podemos escribir as\xed:\n Int cont=0;\nWhile (cont<100){\nPrintf(\u201cHola, mundo\u201d);\nCont++\n}\n\nEJERCICIOS\nCree un programa que le pida una contrase\xf1a al usuario, y si ingresa la contrase\xf1a correcta, se le muestre \u201cHAZ ADIVINADO LA CONTRASE\xd1A\u201d\nTema 2:\n\nArreglos \u2794 Permiten almacenar muchos valores en una misma variable.\n                   Para crear un arreglo se debe:\nDefinir tipo\nIndicar nombre de la variable\nTama\xf1o del arreglo\n\nEjemplo: int a [5];  esto indica entonces que la variable a es un arreglo de 5 espacios. Tener en cuenta que se parte desde el arreglo cero, y termina en el arreglo 4.\n\n\n\n*Para llenar un arreglo se puede hacer de tres formas:\n\n   -Caso 1:   int a [5] = {1,9,3,4,8};\n\n   -Caso 2:   int a [5];\n                     a[0]=1;\n                     a[1]=9;\n                     a[2]=3;\n                     a[3]=4;\n                     a[4]=8;\n\n-Caso3: int a [5];\n  for (int i=0; i<5; i ++){\n scanf("%i", a[i]); \xa0\n}\n\nEJERCICIO:\nCree un arreglo con las notas de un alumno y luego calcule su promedio.\n'},{title:"Clase 3: ",n:3,tags:["funciones","declaracion"],brief:"Aprender\xe1s a crear funciones que te serviran para ahorrar lineas de c\xf3digos y no repetirlas.",text:"Funciones\n\n-Para crear una funci\xf3n se debe tener en consideraci\xf3n lo siguiente:\nTener un \xfanico nombre.\nDebe aclarar un tipo de dato, si retorna o no un valor, sino lo hace debe emplear void.\nDebe indicar si recibe valores (par\xe1metros) y de que tipo.\n\n-Ejemplo: int suma(int a, int b){\n                   int c;\n                   c=a+b;\n                   return(c);\n                 }\nEn el ejemplo el tipo de la funci\xf3n es \u201cint\u201d, ya que la funci\xf3n retornara un valor entero, los par\xe1metros de entrada son \u201cint a\u201d y \u201cint b\u201d, esto quiere decir que la funci\xf3n recibe dos valores de tipo entero, finalmente el return, indica que se devolver\xe1 el valor de c, vale decir, la suma de a y b, a la funci\xf3n principal.\n\nEJERCICIO:\nCree funciones de calculadora(sumar, restar, dividir y multiplicar), luego crea dos variables de numeros  y muestra en la pantalla los resultados de todas las operaciones\n"},{title:"Clase 4: ",n:4,tags:["busqueda","lineal","binaria"],brief:"En este clase aprender\xe1s como buscar un elemento dentro de un conjunto",text:"Busqueda Lineal  \u2192 La b\xfasqueda lineal permite encontrar elementos dentro de un conjunto. Este tipo de b\xfasqueda consiste b\xe1sicamente en buscar un elemento de manera secuencial. Entonces vamos preguntando si el elemento que buscamos es igual al primero, al segundo, al tercero\u2026 (As\xed hasta encontrar el n\xfamero que buscamos)\n\nBusqueda Binaria \uf0e0 la b\xfasqueda binaria permite encontrar elementos dentro de un conjunto previamente ordenado\nEste algoritmo reduce el tiempo de b\xfasqueda considerablemente, ya que disminuye exponencialmente el n\xfamero de iteraciones necesarias.\nPara implementar este algoritmo se compara el elemento a buscar con un elemento cualquiera del conjunto (generalmente es el elemento central); si el valor de \xe9ste es mayor que el del elemento buscado se repite el procedimiento desde el inicio de \xe9ste hasta el elemento, en caso contrario se toma la parte del conjunto que va desde el elemento tomado hasta el final. De esta manera obtenemos intervalos cada vez m\xe1s peque\xf1os, hasta que se obtenga un intervalo indivisible. Si el elemento no se encuentra dentro de este \xfaltimo entonces se deduce que el elemento buscado no se encuentra en todo el conjunto.\n\nEJERCICIO:\n1. Escribe el c\xf3digo de un programa que cree arreglo de 100 n\xfameros enteros\ngenerados de manera aleatoria.\nPista: Para esto ocupa rand()%N\nEsto te entrega valores aleatorias de 0 a n-1\nEj: int x= rand()%10;\nEste te entregara valores del 0 al 9.)\ny luego crea una variable con un nuemero.\n Si el n\xfamero se encuentra en el arreglo, se debe indicar su posici\xf3n. Sino se encuentra, se\ndebe desplegar un mensaje con esta informaci\xf3n.\n2. Escribe el c\xf3digo de un programa que usa b\xfasqueda binaria para buscar un n\xfamero\nen un arreglo de n\xfameros ordenados."},{title:"Clase 5: ",n:5,tags:["swap","algoritmo","ordenamiento","sort"],brief:"Aprender\xe1s a ordenar conjuntos\n  de datos en un arreglo usando cambio de posici\xf3n",text:"Tema 1: SWAP\n\nSwap \u2192 Permite hacer intercambio de variables\nPara hacer un intercambio, no se hace directamente entre las dos variables, sino que necesitamos de una variable auxiliar, para explicar como funciona lo haremos a trav\xe9s de un ejemplo\nEjemplo: Para pasar de 34, 15   ----\x3e  15, 34\n Int x = 34;\nInt y = 15;\nInt aux = 0;\n aux = x;  \u2192  //asignamos el valor que tiene x, en este caso 34 a la variable aux.\n x=y;  \u2192 // asignamos el valor de la variable y, en este caso 15 a la variable x.\ny=aux; \u2192 // asignamos el valor que guarda aux en la variable y.\n\nTema 2: Algortimos de ordenamiento (parte 1)\nSelection Sort \u2192 Este es un algoritmo que permite ordenar los elementos de un conjunto. Selection Sort busca el menor n\xfamero del conjunto y lo intercambia con el primero, quedando el n\xfamero menor en un \u201clista ordenada\u201d y el resto en una \u201cdesordenada\u201d, luego vuelve a buscar el menor n\xfamero de la lista desordenada y lo intercambia con el primer n\xfamero de esa misma lista y este nuevo n\xfamero que es menor queda en la lista ordenada, y as\xed sucesivamente.\nEjemplo: Sea el conjunto {15, 1, 8, 6, 12}\nBusca el menor, en este caso es el 1, lo cambia con el primer n\xfamero,  y queda el 1 en una lista ordenada  \u2192 {1, 15, 8, 6, 12}\nVuelve a buscar el menor entre la lista desordenada y lo intercambia con el primer n\xfamero de la lista desordenada \u2192 {1,6,8,15,12}\nBusca el menor de la lista desordenada, en este caso el 8, y lo ubica (coincide en este caso que esta en la misma posici\xf3n) \u2192 {1,6,8,15,12}\nEl menor de la lista desordenada es 12, entonces lo intercambia con el 15 \u2192 {1,6,8,12,15}\n\nSelection sort \uf0e0 Consiste en encontrar el menor de todos los elementos del arreglo e intercambiarlo con el que est\xe1 en la primera posici\xf3n. Luego el segundo mas peque\xf1o, y as\xed sucesivamente hasta ordenarlo todo.\nSu funcionamiento se puede definir de forma general como:\nBuscar el m\xednimo elemento entre una posici\xf3n i y el final de la lista\nIntercambiar el m\xednimo con el elemento de la posici\xf3n i\nAs\xed, se puede escribir el siguiente pseudoc\xf3digo para ordenar una lista de n elementos indexados desde el 1:\nvoid selectionsort(int * x, int n){\n\n  int minimo=0,i,j;\n  int swap;\n  for(i=0 ; i<n-1 ; i++)\n  {\n     minimo=i;\n     for(j=i+1 ; j<n ; j++)\n        if (x[minimo] > x[j])\n           minimo=j;\n     swap=x[minimo];\n     x[minimo]=x[i];\n     x[i]=swap;\n  }}\n\nEJERCICIO:\nCree un arreglo de 100 nuemero y luego ordenelos de mayor a menor(imprima el resultado)\n"},{title:"Clase 6: ",n:6,tags:["bubble","sort","merge","ordenamiento"],brief:"Esta clase es la continuaci\xf3n de la clase 5, por lo que seguiremos aprendiendo a ordenar conjuntos",text:"ALGORITMOS DE ORDENAMIENTO (parte 2)\n\nBubble Sort \u2192 Es un algoritmo usado para ordenar una secuencia de n\xfameros\nSea el conjunto {5,9,3,1,2,8,4,7,6}\n-En este caso compara el 7 y el 6, si el n\xfamero de la derecha es menor que el de la izquierda, entonces los n\xfameros se intercambian (swap)\n \u2192 {5,9,3,1,2,8,4,6,7}\n-Una vez terminado este intercambio, se avanza una posici\xf3n a la izquierda, y compara de nuevo e intercambia si  se cumple que el de la derecha sea menor, en el ejemplo comparara los n\xfameros 4 y 6, y como el 6 no es menor que 4, se mantiene\n \u2192 {5,9,3,1,2,8,4,6,7}\n-Se avanza una posici\xf3n a la izquierda y compara de nuevo, ahora entre el 4 y 8, en caso que se cumpla que el n\xfamero de la derecha sea menor, los intercambia\n\u2192 {5,9,3,1,2,4,8,6,7}\n- Se seguir\xe1 comparando hasta que se alcanza el extremo izquierdo, cuando el menor n\xfamero del conjunto llega a la primera posici\xf3n, se \u201cfija\u201d, quedando en una lista ordenada                                  \u2192  {1,5,9,3,2,4,8,6,7}\n- Una vez que se fij\xf3 el valor, se devuelve al extremo  derecho y comienza a comparar de nuevo, en el ejemplo comparara el 6 y el 7, y como el 7 no es menor que 6, el orden queda igual. Luego avanzara y tomara el 8 y el 6, para compararlos, como se cumple que el 6 es menor que 8, har\xe1 un swap y los intercambiara \u2192 {1,5,9,3,2,4,6,8,7}.\n- Cuando llegue a comparar el 2 con el 3, los intercambiara, luego el 2 con el 9 tambi\xe9n y finalmente el 2 con el 5 ser\xe1n intercambiados de igual manera. Entonces quedara el 2 en la lista ordenada \u2192 {1,2,5,9,3,4,6,8,7}\n -Seguir\xe1  as\xed sucesivamente, avanzando, comparando e intercambiando en los casos necesarios hasta que quede todo ordenado.\nMerge sort \uf0e0\nEs un algoritmo de ordenamiento que funciona si inicialmente tenemos la lista desordenada, y la dividimos a la mitad, nos quedaremos con 2 sub-listas desordenadas, entonces, realizamos otra vez la misma acci\xf3n: dividimos las sub-listas resultantes en 4 nuevas sub-listas, y as\xed sucesivamente.\n\nEsta operaci\xf3n se realizar\xe1 hasta que lleguemos a una sub-lista con 1 o 0 elementos en ella, que por defecto va a estar ordenada, y como dicha sub-lista ya est\xe1 ordenada, la mezclamos con la de al lado, que est\xe1 ordenada tambi\xe9n, y as\xed continuamente vamos ordenando las sub-listas hacia arriba para llegar al caso base."},{title:"Clase 7: ",n:7,tags:["recursion","funciones"],brief:"Aqui aprender\xe1s funciones recursivas",text:"-Recursi\xf3n \u2192 La recursi\xf3n es cuando una funci\xf3n se llama as\xed misma.\n La recursi\xf3n cuenta con:\n 1) CASO BASE: Condici\xf3n de t\xe9rmino.\n2) CASO REPETITIVO: Involucra volver a utilizar la funci\xf3n original, con par\xe1metros que se acercan m\xe1s al caso base.\nUno de los ejemplos m\xe1s cl\xe1sicos es el factorial de un n\xfamero. Intenta seguir la explicaci\xf3n razonando cada paso. Para cualquier entero positivo N, el factorial de N (expresado como N!) es el producto de todos los enteros menor a \xe9l:\n\n1! = 1\n2! = 1 x 2 = 2\n3! = 1 x 2 x 3 = 6\n4! = 1 x 2 x 3 x 4 = 24\nObservaciones:\n-Se puede ver que el factorial de cada n\xfamero incluye el factorial de todos los n\xfameros anteriores a \xe9l\n- Para cualquier entero N mayor a 1, podemos decir que el factorial de N es igual al factorial del n\xfamero anterior a N multiplicado por N. La f\xf3rmula N! = (N-1)! x N.\n-Entonces se podr\xeda decir que una buena t\xe9cnica es encontrar el factor en el resultado que se repite.\n\nEJERCICIOS:\n1.Programe un algoritmo recursivo que permita sumar los elementos de un vector.\n2.Programe un algoritmo recursivo que permita multiplicar los elementos de un vector\n"},{title:"Clase 8: ",n:8,tags:["punteros","swap","memoria"],brief:"Aqu\xed aprender\xe1s punteros y podr\xe1s hacer un swap en la variable original y no en una copia",text:'Punteros\nUn puntero es una variable que contiene la direcci\xf3n de memoria de otra variable.\nLos punteros permiten c\xf3digo m\xe1s compacto y eficiente; utiliz\xe1ndolos en forma\nordenada dan gran flexibilidad a la programaci\xf3n.\nLa direcci\xf3n de memoria de una variable se obtiene con el operador unario &.\nEl operador unario * permite la desreferencia de un variable puntero; es decir, permite\nel acceso a lo apuntado por un puntero.\nDado el ejemplo\nint x = 1, y = 2;\nint *ip; /* ip es un puntero a int */\nip = &x; /* ip apunta a x */\ny = *ip; /* a y se le asigna lo apuntado por ip */\n*ip = *ip + 3; /* incrementa lo apuntado por ip, x */\nip = NULL; /* ip apunta a direcc. especial (nada) */\n\nPara el cambio de variables ocupamos el swap anteriormente explicado en la clase 5\nPero este solamente genera una copia de la variable pero no cambia la original de valor. Para poder cambiar la original de valor hacemos un swap con punteros, como se muestra a continuaci\xf3n:\n#include <stdio.h>\nvoid intercambio(int *a, int *b);\nint main(void)\n{\n  int a=1;\n  int b=3;\n\n  printf("Valor de a: %i. Valor de b: %i\n", a,b);\n  intercambio(&a,&b);\n  printf("Valor de a: %i. Valor de b: %i\n", a,b);\n}\nvoid intercambio(int *a,int *b)\n{\n  int aux;\n\n  aux=*b;\n  *b =*a;\n  *a =aux;\n  printf("Dentro de funci\xf3n, a: %i, b:%i\n", *a,*b);\n}\n\nSi a una funci\xf3n se le entregan las direcciones de memoria de las variables (en vez de sus valores), la funci\xf3n puede acceder directamente al original (el contenido de la variable).\n\nEJERCICIO:\nRealice un programa que haga un swap con punteros.\n'},{title:"Clase 9: ",n:9,tags:["estructuras"],brief:"Aqui aprender\xe1s a usar un conjunto de datos en forma de estructura",text:'ESTRUCTURAS\nStruct \uf0e0 Una estructura de datos es una forma de organizar un conjunto de datos elementales con el objeto de facilitar su manipulaci\xf3n.\nLa estructura de datos define la organizaci\xf3n e interrelaci\xf3n de \xe9stos y un conjunto de operaciones que se pueden realizar sobre ellos\nLas estructuras es la agrupaci\xf3n de elementos de distintos tipos de datos:\nStruct nombre_estructura {\n        Tipo_1    nombre_tipo_1;\n        Tipo_2    nombre_tipo_1;\n        \u2026\n        Tipo_n    nombre_tipo_n;\n};\nEjemplo:\nStruct cuenta_banco{\nString nombre;\nLong float saldo;\nLong int cuenta;\nString RUT;\n};\nPara almacenar datos en la variable se debe escribir:\n<variable>.<nombre_campo>\npor ejemplo cta1.\nStruct cuenta_banco Cta1;\nscanf("%s", Cta1.nombre); \xa0\nCta2.saldo = 4300;\nscanf("%i", Cta1.cuenta); \xa0\nscanf("%s",Cta1.Rut); \xa0\nTambien puedes ocupar un arreglo para hacer varias variables e ir rellen\xe1ndola\nPor ejemplo:\nint main()\n{\n    int i;\n    struct ficha cliente[10];\n    for (i=0;i<10;i++){\n       printf("Ingrese nombre: ");\n       scanf("%s", cliente[i].nombre); \xa0\n\n    }\n}\nAdem\xe1s tambi\xe9n se pueden agregar estructuras dentro de otras estructuras, como muestra el siguiente ejemplo:\n#include <stdio.h>\n#include <cs50.h>\nstruct ficha{\n\tstring nombre;\n\tint   sexo;\n\tstring RUT;\n\tint   edad;\n};\nstruct familia{\n\tstruct ficha padre;\n \tstruct ficha madre;\n   \tstruct ficha hijo[4];\n};\nint main()\n{\n\tstruct familia fm1;\n\n   \tprintf("Ingrese nombre hijo 1: ");\n       scanf("%s", fm1.hijo[0].nombre); \xa0\n}\n\nEjercicio\nRealice un programa que almacene los datos personales de una persona: Nombre, apellido, RUT, tel\xe9fono, edad, y luego imprima los datos ingresados\nImplemente un programa que almacene los datos de 3 personas: nombre, d\xeda de nacimiento, mes de nacimiento, y a\xf1o de nacimiento (que se deben almacenar en una tabla de structs). Despu\xe9s deber\xe1 repetir lo siguiente: Elegir un numero de mes y mostrar en pantalla los datos de las personas que cumplan los a\xf1os durante ese mes.\n'},{title:"Clase 10: ",n:10,tags:["archivos"],brief:"Aprender\xe1s a crear, escribir y leer, dentro de un archivo de texto",text:'ARCHIVOS\nLectura de archivos:\n      Abrir archivo: Los archivos pueden ser abiertos para lectura, escritura o insersi\xf3n. Para ello debemos especificar que queremos hacer.\n\tw\uf0e0 abre un archivo para escritura. Se crea si no existe\n        a \uf0e0 abre un archivo para escritura al final del archivo\n        r \uf0e0 abre un archivo para lectura(el archivo debe existir\n        w+ \uf0e0 Crea un archivo para lectura y escritura\n       a+ \uf0e0 abre/crea un archivo para lectura y escritura al final del archivo\n        r+ \uf0e0 abre un archivo para lectura y escritura (el archivo debe existir)\nPara crear una variable de tipo archivo debemos escribir FILE* (nombrevariable);\nPara abrir el archivo ocupamos fopen:\nLa funci\xf3n fopen tiene dos argumentos. En el primero escribimos el nombre del archivo. En el segundo el tipo de apertura.\narchivo = fopen ("ejemplo.txt", "r");\nEs importante que despu\xe9s de abrir un archivo siempre debemos cerrarlo con fclose\nfclose(archivo);\nLeer archivos:\nPara leer archivos ocupamos la funci\xf3n fgets, que nos permitir\xe1 leer una determinada cantidad de caracteres.\nfgets(buffer, caracteres,file)\npor ejemplo:\n#include<stdio.h>\nint main()\n{\n FILE *archivo;\n char buffer[100];\n archivo = fopen("ejemplo.txt", "r");\n fgets(buffer, 12, archivo);\nprintf("%s",buffer);\nfclose (archivo);\n}\nLa funci\xf3n fscanf es casi lo mismo que scanf excepto que el primer argumento es el puntero del archivo.\nfscanf(*file, format, *char)\npor ejemplo:\n#include<stdio.h>\nint main()\n{\n FILE *archivo;\n char buffer[100];\n archivo = fopen("ejemplo.txt", "r");\n fscanf(archivo, "%s",buffer);\n\n printf("%s",buffer);\n fclose (archivo);\n}\nTambien tenemos la funci\xf3n feof que devuelve cero(Falso) si NO es encontrado el final del archivo, esta la podemos ocupar para poder leer el archivo completo como muestra el siguiente ejemplo:\n#include<stdio.h>\nint main()\n{\n FILE *archivo;\n char buffer[100];\n archivo = fopen("ejemplo.txt", "r" );\n if (archivo!=NULL)\n {\n while (!feof(archivo))\n{\n fscanf(archivo, "%s",buffer);\n printf("%s",buffer);\n }\nfclose (archivo);\n}\nelse\n{\nprintf("Error: Archivo no pudo ser abierto");\n}\n}\nEscritura de Archivos:\nPara la escritura de archivos ocupamos la funci\xf3n fprintf que es casi lo mismo que printf excepto que el primer argumento es el puntero de archivo.\nfprintf(*FILE, formato, *char)\nejemplo:\n#include<stdio.h>\nint main()\n{\n FILE *archivo;\n char buffer[100]= "chao a todos";\n archivo = fopen("ejemplo.txt", "r+");\n fprintf(archivo,"%s", buffer);\n\n fclose (archivo);\n}'}],S={title:"Ejercicios y desafios",n:"ejercicios",text:"EJERCICIOS\n  1.- Cree un programa que permita hacer la divisi\xf3n por restas sucesivas, utilizando recursividad.\n\n  2.- Programe un algoritmo que permita dar vuelta un numero, utilizando recursi\xf3n. Ejemplo sea el numero de entrada 123, el numero de salida debe ser 321.\n\n  3. Cree un programa que permita calcular la multiplicaci\xf3n, utilizando recursi\xf3n.\n\n  4. Cree un programa que te diga si la palabra es palindroma o no.\n\n  5. Implemente un programa de 3 alumnos guardar nombre, nombre de la asignatura y 4 notas. Calcular y mostrar el promedio y la suma de las notas.\n\n  6. Escribe el c\xf3digo de la funci\xf3n busca_max() que retorna la posici\xf3n del elemento del arreglo numeros[] con el m\xe1ximo valor entre las posiciones inicio y final (inclusive).\n\n  7. Cree un programa que te indique si el numero es par o impar\n\n  8. Cree un programa que indique si el numero es primo o no\n\n  9. Cree variables de 5 nombres, luego mu\xe9strale la ultima letra de cada uno de ellos y finalmente mu\xe9strale los nombres dados vuelta.\n\n  10. Escribe el c\xf3digo de la funci\xf3n intercambia_3() que intercambia los valores de 3 posiciones de un arreglo, que ha sido declarado como variable global en el programa. La funci\xf3n no tiene valor de retorno y toma como par\xe1metros de entrada las 3 posiciones cuyos valores se intercambian. Si los nombres de los par\xe1metros de entrada son pos1, pos2 y pos3, entonces la funci\xf3n escribe el contenido de pos3 en pos1, el de pos1 en pos2 y el de pos2 en pos3.\n\n  DESAF\xcdO:\n  Cree un programa que entregue el numero identificar del rut .\n  Para eso debes :\n  tomar los numero del rut, sin contar el digito verificador\n  Dar vuelta esos n\xfameros\n  Tome los numero y vaya multiplicando cada uno de ellos por la siguiente serie de numero : 2,3,4,5,6,7\u2026 en ese orden.Si se le acaban los n\xfameros de la serie, vuelva a usarla desde el principio\n  Una vez que haya multiplicado cada uno de los n\xfameros, sume los resultados obtenidos\n  Divida el numero obtenido por 11 y obtenga el resto\n  Al numero 11 restele el resto de la divisi\xf3n anterior\n  Ahora hay que analizar el numero obtenido:\n        Hay tres posibilidades:\n  Si el numero obtenido es 1, 2,3, 4,5,6,7,8 o 9 ese es el digito verificador\n  Si el numero obtenido es 11, el digito verificador es cero.\n  Si el numero obtenido es 10, el digito verificador es k."},w=function(){return o.a.createElement(C,{clase:S})},I={};N.forEach(function(e){e.tags.forEach(function(a){I[a]?I[a].push(e):I[a]=[e]})});var O=function(e){var a=Object(r.useState)({listaClases:N}),n=Object(c.a)(a,2),i=n[0],t=n[1];return o.a.createElement("div",null,o.a.createElement("div",{className:"nav-wrapper container"},o.a.createElement("form",null,o.a.createElement("div",{className:"input-field"},o.a.createElement("input",{onChange:function(e){var a=e.target.value.toLowerCase();if(""===a)t({listaClases:N});else{var n=a.length,r=[];Object.keys(I).forEach(function(e){e.slice(0,n)===a&&r.push(I[e][0])}),t({listaClases:r})}},id:"search",type:"search",required:!0}),o.a.createElement("label",{className:"label-icon",htmlFor:"search"},o.a.createElement("i",{className:"material-icons"},"search")),o.a.createElement("i",{className:"material-icons"},"close")))),o.a.createElement("div",{className:"row"},i.listaClases.map(function(e,a){return o.a.createElement("div",{key:Math.random(),className:"col s4"},o.a.createElement("div",{className:"card blue-grey darken-3"},o.a.createElement("div",{className:"card-content white-text"},o.a.createElement("span",{className:"card-title"},e.title),o.a.createElement("p",null,e.brief)),o.a.createElement("div",{className:"card-action blue-grey darken-2 "},o.a.createElement(s.b,{to:"/clases/"+a},"Ir a la clase!"))))})))},P=function(e){return o.a.createElement(o.a.Fragment,null,o.a.createElement("div",{className:"section jumbotron"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"col s4 offset-s4 jumbotext"},o.a.createElement("h1",{className:"center-align"}," LO "),o.a.createElement("h1",{className:"center-align"}," DAMOS "),o.a.createElement("h1",{className:"center-align"}," VUELTA ")))),o.a.createElement("div",{className:"section"},o.a.createElement("div",{className:"col s4"},o.a.createElement("h6",null,"Aprende!"),o.a.createElement("i",{className:"medium material-icons"},"thumb_up"),o.a.createElement("p",null,"Aqu\xed podr\xe1s aprender todo lo necesario para programar en lenguaje C")),o.a.createElement("div",{className:"col s4"},o.a.createElement("h6",null,"Practica!"),o.a.createElement("i",{className:"medium material-icons"},"grade"),o.a.createElement("p",null,"Tambi\xe9n podr\xe1s aplicar lo aprendido con diversos ejercicios")),o.a.createElement("div",{className:"col s4"},o.a.createElement("h6",null,"Desafiate!"),o.a.createElement("i",{className:"medium material-icons"},"trending_up"),o.a.createElement("p",null,"Encontraras dificiles desaf\xedos... pero lo lograras!"))))},z=function(e){var a=Object(r.useState)([": ninguna"]),n=Object(c.a)(a,2),i=n[0],t=n[1],s=Object(r.useContext)(d).state;return Object(r.useEffect)(function(){y.ref().child("vistos").child(s.user.uid).on("value",function(e){var a=e.val();a&&t(a)})},[]),o.a.createElement("div",{className:"row"},o.a.createElement("h5",null,"Haz hecho: "),i.map(function(e){return o.a.createElement("p",{key:Math.random()},"Clase ",e)}),o.a.createElement("button",{onClick:function(){return e.signOut()},className:"col s12 waves-effect waves-light btn blue-grey darken-2"},"Salir"))},A=function(e){var a=Object(r.useContext)(d),n=a.state,i=a.dispatch,t=Object(r.useState)(""),s=Object(c.a)(t,2),l=s[0],u=s[1],m=Object(r.useState)(""),p=Object(c.a)(m,2),b=p[0],f=p[1],v=Object(r.useState)(""),E=Object(c.a)(v,2),q=E[0],y=E[1],j=Object(r.useState)({val:!0,text1:"Entrar",text2:"Todavia no tengo cuenta"}),C=Object(c.a)(j,2),N=C[0],S=C[1],w=function(){var e=Object(h.a)(g.a.mark(function e(a,n){var r;return g.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x.signInWithEmailAndPassword(a,n);case 2:r=e.sent,i({type:"USER_LOGIN",payload:r});case 4:case"end":return e.stop()}},e)}));return function(a,n){return e.apply(this,arguments)}}(),I=function(){var e=Object(h.a)(g.a.mark(function e(a,n,r){var o;return g.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:if(n!==r){e.next=7;break}return e.next=3,x.createUserWithEmailAndPassword(a,n);case 3:o=e.sent,i({type:"USER_LOGIN",payload:o}),e.next=8;break;case 7:console.warn("contrase\xf1a no coincide");case 8:case"end":return e.stop()}},e)}));return function(a,n,r){return e.apply(this,arguments)}}(),O=function(){var e=Object(h.a)(g.a.mark(function e(){return g.a.wrap(function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,x.signOut();case 2:i({type:"USER_LOGIN",payload:""});case 3:case"end":return e.stop()}},e)}));return function(){return e.apply(this,arguments)}}(),P=o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"input-field col s12"},o.a.createElement("input",{onChange:function(e){return y(e.target.value)},id:"password2",type:"password",className:"validate"}),o.a.createElement("label",{htmlFor:"password2"},"Repita contrase\xf1a")));return o.a.createElement("div",{className:"container"},o.a.createElement("h3",null,n.user?"Salir":N.text1),n.user?o.a.createElement(z,{user:n.user,signOut:O}):o.a.createElement("div",{className:"row"},o.a.createElement("form",{className:"col s12"},o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"input-field col s12"},o.a.createElement("input",{onChange:function(e){return f(e.target.value)},id:"email",type:"email",className:"validate"}),o.a.createElement("label",{htmlFor:"email"},"Email"))),o.a.createElement("div",{className:"row"},o.a.createElement("div",{className:"input-field col s12"},o.a.createElement("input",{onChange:function(e){return u(e.target.value)},id:"password",type:"password",className:"validate"}),o.a.createElement("label",{htmlFor:"password"},"Contrase\xf1a"))),!N.val&&P,o.a.createElement("button",{onClick:function(e){e.preventDefault(),N.val?w(b,l):I(b,l,q)},className:"col s12 waves-effect waves-light btn blue-grey darken-2"},N.text1),o.a.createElement("button",{onClick:function(e){e.preventDefault(),N.val?S({val:!1,text1:"Registrarse",text2:"Ya tengo cuenta"}):S({val:!0,text1:"Entrar",text2:"Todavia no tengo cuenta"})},className:"col s12 waves-effect waves-light btn blue-grey darken-2"},N.text2))))};var L=function(){return o.a.createElement("h1",null,"404 - Sorry this page is not found")},R=function(e){var a=e.match;return a.params.id<N.length&&a.params.id>=0?o.a.createElement(C,{clase:N[a.params.id]}):o.a.createElement(L,null)},T=function(e){return o.a.createElement(s.a,{basename:"/pythonCourse"},o.a.createElement(b,null),o.a.createElement(l.c,null,o.a.createElement(l.a,{exact:!0,path:"/",component:P}),o.a.createElement(l.a,{exact:!0,path:"/indice",component:O}),o.a.createElement(l.a,{exact:!0,path:"/lessons",component:w}),o.a.createElement(l.a,{exact:!0,path:"/user",component:A}),o.a.createElement(l.a,{path:"/clases/:id",component:R}),o.a.createElement(l.a,{component:L})),o.a.createElement(f,null))};t.a.render(o.a.createElement(function(e){var a=function(e){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"state",n=m.getItem(a);return n?JSON.parse(n):e}(Object(r.useContext)(d)),n=function(e){var a=Object(c.a)(e,2),n=a[0],o=a[1],i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"state";return Object(r.useEffect)(function(){return m.setItem(i,JSON.stringify(n))},[n]),[n,o]}(Object(r.useReducer)(p,a)),i=Object(c.a)(n,2),t={state:i[0],dispatch:i[1]};return o.a.createElement(d.Provider,{value:t},e.children)},null,o.a.createElement(T,null)),document.getElementById("root"))},53:function(e,a,n){e.exports=n(108)}},[[53,1,4]],[3]]);
//# sourceMappingURL=main.14b96eac.chunk.js.map